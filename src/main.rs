use gif::{Encoder, Frame, Repeat};
use rand::Rng;
use std::borrow::Cow;
use std::fs::File;
mod neighborhoods;

const WIDTH: usize = 200;
const HEIGHT: usize = 200;
const PIXELS: usize = WIDTH * HEIGHT;
const FRAMES: usize = 100;
const FRAME_REPEAT: usize = 1;
const NUDGE_VALUE: f32 = 0.1;

fn real_to_int_map(val: f32) -> u8 {
    (val * 255.) as u8
}

fn bound_value(val: f32) -> f32 {
    if val > 1. {
        return 1.;
    } else if val < 0. {
        return 0.;
    }
    val
}

fn sum_values_in_neighborhood(
    cellular_state: &std::vec::Vec<[f32; WIDTH]>,
    neighborhood: &[[i32; neighborhoods::NEIGHBORHOOD_WIDTH]; neighborhoods::NEIGHBORHOOD_WIDTH],
    cell_i: usize,
    cell_j: usize,
) -> f32 {
    let mut sum: f32 = 0.0;
    let offset = (neighborhoods::NEIGHBORHOOD_WIDTH / 2) as i32;
    let cell_i = cell_i as i32;
    let cell_j = cell_j as i32;
    let height = HEIGHT as i32;
    let width = WIDTH as i32;

    for i in 0..neighborhoods::NEIGHBORHOOD_WIDTH {
        for j in 0..neighborhoods::NEIGHBORHOOD_WIDTH {
            if neighborhood[i][j] == 1 {
                let i = cell_i + i as i32 - offset;
                let j = cell_j + j as i32 - offset;
                if i >= 0 && j >= 0 && i < height && j < width {
                    sum += cellular_state[i as usize][j as usize];
                }
            }
        }
    }

    sum
}

fn main() {
    /*
    How the color map works, each triple of values is one color R,G,B
    The first triple will be the color you get if you have a 0 for that pixel
    The second triple will be the color you get if you have a 1 for that pixel
    And so on
    */
    let color_map = &[
        0x00, 0x00, 0x0, 0x00, 0x00, 0x1, 0x00, 0x00, 0x2, 0x00, 0x00, 0x3, 0x00, 0x00, 0x4, 0x00,
        0x00, 0x5, 0x00, 0x00, 0x6, 0x00, 0x00, 0x7, 0x00, 0x00, 0x8, 0x00, 0x00, 0x9, 0x00, 0x00,
        0xa, 0x00, 0x00, 0xb, 0x00, 0x00, 0xc, 0x00, 0x00, 0xd, 0x00, 0x00, 0xe, 0x00, 0x00, 0xf,
        0x00, 0x00, 0x10, 0x00, 0x00, 0x11, 0x00, 0x00, 0x12, 0x00, 0x00, 0x13, 0x00, 0x00, 0x14,
        0x00, 0x00, 0x15, 0x00, 0x00, 0x16, 0x00, 0x00, 0x17, 0x00, 0x00, 0x18, 0x00, 0x00, 0x19,
        0x00, 0x00, 0x1a, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x1e,
        0x00, 0x00, 0x1f, 0x00, 0x00, 0x20, 0x00, 0x00, 0x21, 0x00, 0x00, 0x22, 0x00, 0x00, 0x23,
        0x00, 0x00, 0x24, 0x00, 0x00, 0x25, 0x00, 0x00, 0x26, 0x00, 0x00, 0x27, 0x00, 0x00, 0x28,
        0x00, 0x00, 0x29, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x2d,
        0x00, 0x00, 0x2e, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x30, 0x00, 0x00, 0x31, 0x00, 0x00, 0x32,
        0x00, 0x00, 0x33, 0x00, 0x00, 0x34, 0x00, 0x00, 0x35, 0x00, 0x00, 0x36, 0x00, 0x00, 0x37,
        0x00, 0x00, 0x38, 0x00, 0x00, 0x39, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x3d, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x40, 0x00, 0x00, 0x41,
        0x00, 0x00, 0x42, 0x00, 0x00, 0x43, 0x00, 0x00, 0x44, 0x00, 0x00, 0x45, 0x00, 0x00, 0x46,
        0x00, 0x00, 0x47, 0x00, 0x00, 0x48, 0x00, 0x00, 0x49, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x4b,
        0x00, 0x00, 0x4c, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x50,
        0x00, 0x00, 0x51, 0x00, 0x00, 0x52, 0x00, 0x00, 0x53, 0x00, 0x00, 0x54, 0x00, 0x00, 0x55,
        0x00, 0x00, 0x56, 0x00, 0x00, 0x57, 0x00, 0x00, 0x58, 0x00, 0x00, 0x59, 0x00, 0x00, 0x5a,
        0x00, 0x00, 0x5b, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x5f,
        0x00, 0x00, 0x60, 0x00, 0x00, 0x61, 0x00, 0x00, 0x62, 0x00, 0x00, 0x63, 0x00, 0x00, 0x64,
        0x00, 0x00, 0x65, 0x00, 0x00, 0x66, 0x00, 0x00, 0x67, 0x00, 0x00, 0x68, 0x00, 0x00, 0x69,
        0x00, 0x00, 0x6a, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x6e,
        0x00, 0x00, 0x6f, 0x00, 0x00, 0x70, 0x00, 0x00, 0x71, 0x00, 0x00, 0x72, 0x00, 0x00, 0x73,
        0x00, 0x00, 0x74, 0x00, 0x00, 0x75, 0x00, 0x00, 0x76, 0x00, 0x00, 0x77, 0x00, 0x00, 0x78,
        0x00, 0x00, 0x79, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x7d,
        0x00, 0x00, 0x7e, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x80, 0x00, 0x00, 0x81, 0x00, 0x00, 0x82,
        0x00, 0x00, 0x83, 0x00, 0x00, 0x84, 0x00, 0x00, 0x85, 0x00, 0x00, 0x86, 0x00, 0x00, 0x87,
        0x00, 0x00, 0x88, 0x00, 0x00, 0x89, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x8c,
        0x00, 0x00, 0x8d, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x90, 0x00, 0x00, 0x91,
        0x00, 0x00, 0x92, 0x00, 0x00, 0x93, 0x00, 0x00, 0x94, 0x00, 0x00, 0x95, 0x00, 0x00, 0x96,
        0x00, 0x00, 0x97, 0x00, 0x00, 0x98, 0x00, 0x00, 0x99, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x9b,
        0x00, 0x00, 0x9c, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x9f, 0x00, 0x00, 0xa0,
        0x00, 0x00, 0xa1, 0x00, 0x00, 0xa2, 0x00, 0x00, 0xa3, 0x00, 0x00, 0xa4, 0x00, 0x00, 0xa5,
        0x00, 0x00, 0xa6, 0x00, 0x00, 0xa7, 0x00, 0x00, 0xa8, 0x00, 0x00, 0xa9, 0x00, 0x00, 0xaa,
        0x00, 0x00, 0xab, 0x00, 0x00, 0xac, 0x00, 0x00, 0xad, 0x00, 0x00, 0xae, 0x00, 0x00, 0xaf,
        0x00, 0x00, 0xb0, 0x00, 0x00, 0xb1, 0x00, 0x00, 0xb2, 0x00, 0x00, 0xb3, 0x00, 0x00, 0xb4,
        0x00, 0x00, 0xb5, 0x00, 0x00, 0xb6, 0x00, 0x00, 0xb7, 0x00, 0x00, 0xb8, 0x00, 0x00, 0xb9,
        0x00, 0x00, 0xba, 0x00, 0x00, 0xbb, 0x00, 0x00, 0xbc, 0x00, 0x00, 0xbd, 0x00, 0x00, 0xbe,
        0x00, 0x00, 0xbf, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc1, 0x00, 0x00, 0xc2, 0x00, 0x00, 0xc3,
        0x00, 0x00, 0xc4, 0x00, 0x00, 0xc5, 0x00, 0x00, 0xc6, 0x00, 0x00, 0xc7, 0x00, 0x00, 0xc8,
        0x00, 0x00, 0xc9, 0x00, 0x00, 0xca, 0x00, 0x00, 0xcb, 0x00, 0x00, 0xcc, 0x00, 0x00, 0xcd,
        0x00, 0x00, 0xce, 0x00, 0x00, 0xcf, 0x00, 0x00, 0xd0, 0x00, 0x00, 0xd1, 0x00, 0x00, 0xd2,
        0x00, 0x00, 0xd3, 0x00, 0x00, 0xd4, 0x00, 0x00, 0xd5, 0x00, 0x00, 0xd6, 0x00, 0x00, 0xd7,
        0x00, 0x00, 0xd8, 0x00, 0x00, 0xd9, 0x00, 0x00, 0xda, 0x00, 0x00, 0xdb, 0x00, 0x00, 0xdc,
        0x00, 0x00, 0xdd, 0x00, 0x00, 0xde, 0x00, 0x00, 0xdf, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe1,
        0x00, 0x00, 0xe2, 0x00, 0x00, 0xe3, 0x00, 0x00, 0xe4, 0x00, 0x00, 0xe5, 0x00, 0x00, 0xe6,
        0x00, 0x00, 0xe7, 0x00, 0x00, 0xe8, 0x00, 0x00, 0xe9, 0x00, 0x00, 0xea, 0x00, 0x00, 0xeb,
        0x00, 0x00, 0xec, 0x00, 0x00, 0xed, 0x00, 0x00, 0xee, 0x00, 0x00, 0xef, 0x00, 0x00, 0xf0,
        0x00, 0x00, 0xf1, 0x00, 0x00, 0xf2, 0x00, 0x00, 0xf3, 0x00, 0x00, 0xf4, 0x00, 0x00, 0xf5,
        0x00, 0x00, 0xf6, 0x00, 0x00, 0xf7, 0x00, 0x00, 0xf8, 0x00, 0x00, 0xf9, 0x00, 0x00, 0xfa,
        0x00, 0x00, 0xfb, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfd, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xff,
    ];

    let mut rng = rand::thread_rng();

    // Set up gif generator
    let mut image = File::create("beacon.gif").unwrap();
    let mut encoder = Encoder::new(&mut image, WIDTH as u16, HEIGHT as u16, color_map).unwrap();
    encoder.set_repeat(Repeat::Infinite).unwrap();

    // initialize the states to something random in [0,1)
    let mut cellular_state = vec![[0.0; WIDTH]; HEIGHT];
    for i in HEIGHT/3..2*HEIGHT/3 {
        for j in WIDTH/3..2*WIDTH/3 {
            cellular_state[i][j] = rng.gen();
        }
    }

    let mut next_cellular_state = vec![[0.0; WIDTH]; HEIGHT];
    for frame_count in 0..FRAMES {
        // simulate
        for i in 0..HEIGHT {
            for j in 0..WIDTH {
                let mut delta = 0.0;
                let mut result = sum_values_in_neighborhood(
                    &cellular_state,
                    &neighborhoods::neighborhood_1,
                    i,
                    j,
                );
                if result <= 17. {
                    delta -= NUDGE_VALUE;
                } else if 40. >= result && result <= 42. {
                    delta += NUDGE_VALUE;
                }
                result = sum_values_in_neighborhood(
                    &cellular_state,
                    &neighborhoods::neighborhood_2,
                    i,
                    j,
                );
                if (10. ..=13.).contains(&result) {
                    delta += NUDGE_VALUE;
                }
                result = sum_values_in_neighborhood(
                    &cellular_state,
                    &neighborhoods::neighborhood_3,
                    i,
                    j,
                );
                if (9. ..=21.).contains(&result) {
                    delta -= NUDGE_VALUE;
                }
                result = sum_values_in_neighborhood(
                    &cellular_state,
                    &neighborhoods::neighborhood_4,
                    i,
                    j,
                );
                if (78. ..=89.).contains(&result) {
                    delta -= NUDGE_VALUE;
                } else if result >= 108. {
                    delta -= NUDGE_VALUE;
                }
                next_cellular_state[i][j] = bound_value(cellular_state[i][j] + delta);
            }
        }

        for i in 0..HEIGHT{
            for j in 0..WIDTH {
                cellular_state[i][j] = next_cellular_state[i][j];
            }
        }

        // convert cellular state to a frame
        let mut next_frame: [u8; PIXELS] = [0; PIXELS];
        let mut frame_i = 0;
        for i in 0..HEIGHT {
            for j in 0..WIDTH {
                next_frame[frame_i] = real_to_int_map(cellular_state[i][j]);
                frame_i += 1;
            }
        }

        println!("Done frame {}/{}", frame_count + 1, FRAMES);
        for _ in 0..FRAME_REPEAT {
            let mut frame = Frame::default();
            frame.width = WIDTH as u16;
            frame.height = HEIGHT as u16;
            frame.buffer = Cow::Borrowed(&next_frame);
            encoder.write_frame(&frame).unwrap();
        }
    }
}
